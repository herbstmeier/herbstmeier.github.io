@page "/projects/alarm"
@using System.Globalization
@* <PageTitle>moritz herbstmeier | @Loc["title"]</PageTitle> *@

<div class="heading-container">
    <h1 class="highlight ltext">light alarm</h1>
</div>

<div class="link-container">
    <a class="hover-box github" href="https://github.com/herbstmeier/LightAlarm" target="_blank"><img class="icon"
            src="img/icons/github.svg" alt=""></a>
</div>

<p>a light alarm is an alarm clock that works not by playing audio, but by illuminating your room. ideally it simulates
    the sun rising in the morning so you awake calmly even during the winter months. this project is part electronics
    design and part embedded software development.
</p>
<h4>features:</h4>
<ul>
    <li>gradual brightness increase reaching 100% at the selected alarm time and starting 30 minutes before</li>
    <li>7 segment display to view either the alarm time or the current time</li>
    <li>rotary encoder to switch through views and edit the alarm time</li>
    <li>3 way switch to select between alarm, lamp and off modes</li>
    <li>adjustable brightness in lamp mode</li>
</ul>

<h2>electronics</h2>
<p>the electronics design can be split up into these parts:</p>
<ul>
    <li>microcontroller</li>
    <li>led</li>
    <li>7 segment display</li>
    <li>control components</li>
    <li>miscellaneous components</li>
</ul>
<h4>microcontroller</h4>
<p>the centerpiece of this project is an arduino nano. i had one lying around and it allows
    for easy through hole design at a relatively small size. to keep the time i use a cr2032 rtc which communicates with
    the arduino via its i2c bus.
</p>

<h4>led</h4>
<p>
    the other critical component is the led. for this purpose a
    rather powerful led is needed. otherwise the desired wake up effect may not
    be reached. therefore i used a cob led rated for 710lm at 12V with a warm white color. pro tip: don't stare directly
    at a bright light as you turn it on. it hurts.<br>
    pwm is used to control the brightness of the led. the driver mosfet receives the control signal directly from the
    arduino.
</p>

<h4>7 segment display</h4>
<p>a 7 segment display works by periodically updating which of its 7 (8 with a decimal point) leds light up. to form an
    easily legible hh.mm clock i use 4 diplay pieces so 29 digital connections are needed. the arduino nano has 14
    digital pins. its 8 analog pins can also be used, but two of those are responsible for i2c communication. plus, it
    simply is neither efficient nor pretty. a shift
    register solves this problem. it receives the correct led layout serially from the arduino and
    puts it out in parallel. to update the display i cycle through updating the 4 pieces one after another. only 6
    digital pins are required then (1 per diplay piece + shift register data and clock).
</p>

<h4>control components</h4>
<p>there are three control components. the 3 way mode switch, the rotary encoder and the brightness control
    potentiometer.
    the mode switch is hooked up directly to digital pins. the brightness potentiometer send an analog voltage to the
    arduino.
    i use a debouncing circuit for the rotary encoder which i found in its datasheet. other than that it is also
    directly connected to the nano. the encoder inputs are handled by interrupts.
</p>

<h4>miscellaneous components</h4>
<p>these include current limiting (and other) resistors, bipolar transistors for delivering power to the 7 segment leds
    and bypass capacitors.
</p>

<img class="alarm-image" src="img/projects/alarm.png" alt="">

<h4>assembly</h4>
<p>i assembled the circuit on a prototype board with liberal use of wires. the layout is pictured below. more fotos will follow shortly.</p>
<img class="alarm-image" src="img/projects/alarmboard.png" alt="">

<h2>software</h2>
<p>to describe the software i will simplify complex behaviours in order to improve ease of understanding. all the code
    is available to view on github.
</p>
<h4>main flow</h4>
<ul style="list-style: decimal;">
    <li>get current time</li>
    <li>check for daylight savings time</li>
    <li>get mode:</li>
    <ul>
        <li>alarm -> enter alarm flow</li>
        <li>lamp -> set led brightness according to potentiometer setting</li>
        <li>off -> turn off led</li>
    </ul>
    <li>enter display flow</li>
</ul>

<h4>alarm flow</h4>
<ul style="list-style: decimal;">
    <li>adjust current time for daylight savings time</li>
    <li>check alarm state:</li>
    <ul>
        <li>off -> wait for alarm time</li>
        <li>fading in -> set led brightness and wait for fade end</li>
        <li>static -> set led to full brightness</li>
    </ul>
</ul>

<h4>display flow</h4>
<ul style="list-style: decimal;">
    <li>check display mode:</li>
    <ul>
        <li>current time</li>
        <li>alarm time</li>
        <li>alarm time, edit hours</li>
        <li>alarm time, edit minutes</li>
    </ul>
    <li>cycle through the four 7 segment pieces and set corresponding leds</li>
</ul>
