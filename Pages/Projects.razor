@page "/projects"
@inject IStringLocalizer<Projects> Loc

<PageTitle>moritz herbstmeier | @Loc["title"]</PageTitle>

<div class="sort-container">
    <p class="stext">@Loc["sort"]</p>
    <ul class="tags">
        @foreach (var tag in tags)
        {
            <li class="stext highlight @(selectedTags.Contains(tag) ? "" : "sleep")" @onclick="() => toggleTag(tag)">@tag</li>
        }
    </ul>

</div>

<div class="project-container">
    @foreach (var project in visibleProjects)
    {
        <ProjectCard project="@project" OnTagSelected="toggleTag"></ProjectCard>
    }
</div>

@code {
    private List<Project> projects = new List<Project>();
    private List<Project> visibleProjects = new List<Project>();
    private List<String> tags = new List<String>();
    private List<String> selectedTags = new List<String>();

    protected override void OnInitialized()
    {
        projects = projects.Append(
        new Project(
        Loc["alarm-title"],
        Loc["alarm-description"],
        "img/projects/9Mkg.gif",
        new String[2] { "birb", "bruh" },
        "birb"
        )
        ).ToList();

        projects = projects.Append(
        new Project(
        Loc["alarm-title"],
        Loc["alarm-description"],
        "img/projects/9Mkg.gif",
        new String[2] { "apple", "bruh" },
        "birb"
        )
        ).ToList();

        projects = projects.Append(
        new Project(
        Loc["alarm-title"],
        Loc["alarm-description"],
        "img/projects/9Mkg.gif",
        new String[2] { "birb", "cow" },
        "birb"
        )
        ).ToList();

        projects = projects.Append(
        new Project(
        Loc["alarm-title"],
        Loc["alarm-description"],
        "img/projects/9Mkg.gif",
        new String[2] { "potato", "bruh" },
        "birb"
        )
        ).ToList();

        foreach (var project in projects)
        {
            foreach (var tag in project.tags)
            {
                if (!tags.Contains(tag))
                {
                    tags = tags.Append(tag).ToList();
                }
            }
        }

        visibleProjects = new List<Project>();
        visibleProjects = projects;
    }

    public void toggleTag(string tag) {
        if (selectedTags.Contains(tag))
        {
            selectedTags.Remove(tag);
        } else
        {
            selectedTags.Insert(0, tag);
        }
        sortByTags(selectedTags);
    }

    private void sortByTags(List<String> tags)
    {
        visibleProjects = new List<Project>();

        if (tags.Any() == false)
        {
            visibleProjects = projects;
        }
        else
        {
            foreach (var project in projects)
            {
                foreach (var tag in tags)
                {
                    if (project.tags.Contains(tag) && !visibleProjects.Contains(project))
                    {
                        visibleProjects.Insert(visibleProjects.Count, project);
                    }
                }
            }
        }
    }
}
