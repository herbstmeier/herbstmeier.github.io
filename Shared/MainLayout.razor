@inherits LayoutComponentBase
@using System.Globalization
@inject IStringLocalizer<MainLayout> Loc
@inject NavigationManager NavManager

<div class="page">
    <main>
        <div class="phone-menu-container @(hamburgerActive ? "" : "hidden")">
            @foreach (var path in paths)
            {
                <a class="mtext @((selectedPage==path) ? "active" : "")" @onclick="() => setSelectedPage(path)"
                href="@path">@Loc[path]</a>
            }
        </div>

        <div class="top-row @(hamburgerActive ? "active" : "")">
            <div class="hamburger-container" @onclick="toggleHamburger">
                <div></div>
                <div class="middle"></div>
                <div class="bottom"></div>
            </div>
            @foreach (var path in paths)
            {
                <a class="mtext @((selectedPage==path) ? "active" : "")" @onclick="() => setSelectedPage(path)"
                href="@path">@Loc[path]</a>
            }
            <CultureSelector />
        </div>

        <article class="content">
            <div class="body-container">
                @Body
            </div>
        </article>
    </main>
</div>
@code {
    private string selectedPage = String.Empty;
    private bool hamburgerActive = false;
    private string[] paths = new[]
    {
"home",
"about",
"projects"
};
    protected override void OnParametersSet()
    {
        string currentUrl;
        currentUrl = NavManager.ToBaseRelativePath(NavManager.Uri);
        if (currentUrl.Contains('/')) {
            currentUrl = currentUrl.Substring(0, currentUrl.IndexOf('/'));
        }

        if (currentUrl == "")
        {
            currentUrl = "home";
            NavManager.NavigateTo(currentUrl);
        }
        setSelectedPage(currentUrl);
        base.OnParametersSet();
    }

    public void setSelectedPage(string path)
    {
        if (paths.Contains(path))
        {
            selectedPage = path;
        }
        else
        {
            selectedPage = "not found";
        }
        hamburgerActive = false;
    }

    private void toggleHamburger()
    {
        hamburgerActive = !hamburgerActive;
    }
}
